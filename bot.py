import logging
import os
import random

import telebot
from telebot.handler_backends import StatesGroup, State
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
from sqlalchemy import func

from table_models.settings import session
from table_models.users import Translations, Words, Users, UserWords

logging.basicConfig(level=logging.INFO)

load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN'))

correct = []


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


class AddWord(StatesGroup):
    waiting_for_word = State()
    waiting_for_translation = State()


def main_keyboard():
    main_button = ['–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üîëÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è', '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë']

    return main_button


@bot.message_handler(commands=['start'])
def hello_message(message):
    username = message.from_user.username

    if not username:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'
                                          '/start')
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username

    existing_user = session.query(Users).filter_by(username=username).first()
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã @{username}\n\n'
                                          '–°–µ–π—á–∞—Å –º—ã –±—É–¥–µ–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n'
                                          '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç—ã –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å'
                                          ' –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!\n\n–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞: '
                                          '/start_game')
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        try:
            new_user = Users(username=username)
            session.add(new_user)
            session.commit()
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã @{username}\n\n'
                                              '–°–µ–π—á–∞—Å –º—ã –±—É–¥–µ–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n'
                                              '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç—ã –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—ã–±—Ä–∞—Ç—å'
                                              ' –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!\n\n–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞: '
                                              '/start_game')
        except Exception as e:
            session.rollback()
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n'
                                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start')
            print(f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['start_game'])
def main_game(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    target_word = session.query(Words).order_by(func.random()).first()
    russian_word = session.query(Translations.translation).filter(Translations.word_id == target_word.id).first()
    other_random_buttons = session.query(Words).filter(target_word.word != Words.word).order_by(func.random()).limit(
        3).all()
    # main_button = [KeyboardButton(text) for text in main_keyboard()]
    target_word_button = KeyboardButton(f'{target_word.word}')
    incorrect_keyboards_button = [KeyboardButton(word.word) for word in other_random_buttons]
    buttons = [target_word_button] + incorrect_keyboards_button
    random.shuffle(buttons)

    markup.add(*buttons)

    bot.send_message(message.chat.id, f'–ö–∞–∫–æ–π –∏–∑ –Ω–∏–∂–µ–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤–µ—Ä–Ω—ã–π?'
                                      f'\n\n{russian_word.translation}', reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word.word
        data['translate_word'] = russian_word.translation
        data['other_words'] = other_random_buttons
        correct.append(data['target_word'])
        correct.append([word.word for word in other_random_buttons])


@bot.message_handler(func=lambda message: message.text == f'{correct[0]}' or message.text in f'{correct[1][:]}')
def message_reply(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']

    trust_markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)

    if message.text == target_word:
        main_button = [KeyboardButton(text) for text in main_keyboard()]
        trust_markup.add(*main_button)
        bot.send_message(message.chat.id, f'–í–µ—Ä–Ω–æ üëçÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è\n\n'
                                          f'–ù–∞–∂–∏–º–∞–π ¬´–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üîëÔ∏èÔ∏èÔ∏è¬ª_ - —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
                                          f'\n\n¬´–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï¬ª_ - –∂–µ–ª–∞–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å —Å–≤–æ—ë —Å–ª–æ–≤–æ?ü´†'
                                          f'\n\n¬´–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë¬ª - –∂–µ–ª–∞–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è? ü´£',
                         reply_markup=trust_markup)

    else:
        bot.send_message(message.chat.id, f'–≠—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ üôà')


@bot.message_handler(func=lambda message: message.text == "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üîëÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è")
def db_manipulation(message):
    if message.text == '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üîëÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è':
        correct.clear()
        main_game(message)


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë")
def ask_word_to_delete(message):
    correct.clear()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, delete_word)


def delete_word(message):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    word_to_delete = message.text.strip().lower()  # –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = session.query(Users).filter_by(username=message.from_user.username).first()
    word = session.query(Words).filter_by(word=word_to_delete).first()

    if not user or not word:
        correct.clear()
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.–ü—Ä–æ–¥–æ–ª–∂–∏–º?\n\n"
                                          "/start_game")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–æ–≤–æ–º
    user_word = session.query(UserWords).filter_by(user_id=user.id, word_id=word.id).first()

    if user_word:
        correct.clear()
        session.delete(user_word)  # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–æ–≤–æ–º
        session.commit()
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏–º?\n\n"
                                          "/start_game")
    else:
        correct.clear()
        bot.send_message(message.chat.id, "–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï")
def ask_for_word(message):
    markup = ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ üá¨üáß, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(message, process_word_input)


def process_word_input(message):
    word = message.text.lower()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–ª–æ–≤–æ: {word}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ —á–µ—Ä–µ–∑ `bot.send_message` –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    message_data = {'word': word}
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ üá∑üá∫:')
    bot.register_next_step_handler(message, process_translation_input, message_data)


def process_translation_input(message, message_data):
    translation = message.text.lower()
    word = message_data['word']
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    username = message.from_user.username

    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ {word} –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ {translation}")
    try:
        user = session.query(Users).filter_by(username=username).first()
        if not user:
            user = Users(username=username)
            session.add(user)
            session.commit()

        new_word = session.query(Words).filter_by(word=word).first()
        if not new_word:
            new_word = Words(word=word)
            session.add(new_word)
            session.commit()

        new_translation = Translations(translation=translation, words=new_word)
        session.add(new_translation)
        session.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–ª–æ–≤–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        new_user_word = UserWords(user_id=user.id, word_id=new_word.id)
        session.add(new_user_word)
        session.commit()

        correct.clear()
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        main_game(message)

    except Exception as e:
        session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
                                          "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≥–æ. –ù–∞–∂–º–∏ –Ω–∞ start game üëâ: /start_game")
        correct.clear()


@bot.message_handler(content_types=['text'])
def warn(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ, /start')